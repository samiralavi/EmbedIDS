name: PR Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  test-and-coverage:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache
          build/_deps
        key: ${{ runner.os }}-deps-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          gcc \
          g++ \
          lcov \
          bc
    
    - name: Configure CMake with coverage
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DENABLE_COVERAGE=ON \
              -DBUILD_TESTS=ON \
              -DBUILD_EXAMPLES=OFF \
              ..
    
    - name: Build project
      run: |
        cd build
        make -j$(nproc) embedids embedids_tests
    
    - name: Run unit tests
      id: tests
      run: |
        cd build
        echo "::group::Running tests"
        ctest --output-on-failure --verbose
        echo "::endgroup::"
        
        echo "::group::Generating coverage"
        make coverage
        echo "::endgroup::"
    
    - name: Process coverage data
      run: |
        cd build
        
        # Generate lcov report for better analysis
        lcov --capture --directory . --output-file coverage_raw.info
        lcov --remove coverage_raw.info \
          '/usr/*' \
          '*/build/_deps/*' \
          '*/tests/*' \
          '*/examples/*' \
          --output-file coverage.info
        
        # Extract coverage percentage
        COVERAGE_PERCENT=$(lcov --summary coverage.info | grep "lines" | grep -o '[0-9.]*%' | head -1)
        COVERAGE_NUM=$(echo $COVERAGE_PERCENT | sed 's/%//')
        
        echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
        echo "COVERAGE_NUM=$COVERAGE_NUM" >> $GITHUB_ENV
        
        # Generate detailed report
        lcov --summary coverage.info > coverage_summary.txt
        
        # Create markdown report
        cat > coverage_report.md << EOF
        ## üß™ Test Results & Coverage Report
        
        ### ‚úÖ Test Status
        All unit tests passed successfully!
        
        ### üìä Coverage Summary
        **Overall Coverage: $COVERAGE_PERCENT**
        
        \`\`\`
        $(cat coverage_summary.txt)
        \`\`\`
        
        ### üìà Coverage Details
        - **Target Coverage**: 70%
        - **Current Coverage**: $COVERAGE_PERCENT
        - **Status**: $(if (( $(echo "$COVERAGE_NUM >= 70" | bc -l) )); then echo "‚úÖ Meets threshold"; else echo "‚ö†Ô∏è  Below threshold"; fi)
        
        ### üèóÔ∏è Build Information
        - **OS**: Ubuntu 24.04
        - **Compiler**: GCC $(gcc --version | head -1 | awk '{print $4}')
        - **CMake**: $(cmake --version | head -1 | awk '{print $3}')
        - **Build Type**: Debug with Coverage
        
        ### üìÅ Test Files
        - Total Tests: $(ls tests/test_*.cpp 2>/dev/null | wc -l) files
        - Test Executable: \`embedids_tests\`
        
        ---
        <sub>ü§ñ Automated report generated by GitHub Actions</sub>
        EOF
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('build/coverage_report.md', 'utf8');
          
          // Look for existing bot comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üß™ Test Results & Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
            console.log('Updated existing coverage comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
            console.log('Created new coverage comment');
          }
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          build/coverage.info
          build/coverage_summary.txt
          build/Testing/
        retention-days: 7
    
    - name: Check coverage threshold
      run: |
        THRESHOLD=70
        echo "Coverage: $COVERAGE_NUM%, Threshold: $THRESHOLD%"
        
        if (( $(echo "$COVERAGE_NUM < $THRESHOLD" | bc -l) )); then
          echo "::warning::Coverage $COVERAGE_NUM% is below threshold $THRESHOLD%"
          echo "Consider adding more tests to improve coverage."
          # Don't fail the build, just warn
        else
          echo "::notice::Coverage $COVERAGE_NUM% meets threshold $THRESHOLD%"
        fi
    
    - name: Set job summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # üìä Test & Coverage Summary
        
        ## Results
        - ‚úÖ **Tests**: All passed
        - üìà **Coverage**: $COVERAGE_PERCENT
        - üéØ **Threshold**: 70% $(if (( $(echo "$COVERAGE_NUM >= 70" | bc -l) )); then echo "(‚úÖ Met)"; else echo "(‚ö†Ô∏è Not met)"; fi)
        
        ## Artifacts
        - Coverage report uploaded as artifact
        - Detailed results commented on PR
        EOF
