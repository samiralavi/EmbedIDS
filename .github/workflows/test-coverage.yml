name: Unit Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          gcc \
          g++ \
          lcov \
          gcovr \
          python3 \
          python3-pip
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DENABLE_COVERAGE=ON \
              -DBUILD_TESTS=ON \
              -DBUILD_EXAMPLES=ON \
              ..
    
    - name: Build project
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Generate coverage report
      run: |
        cd build
        make coverage
    
    - name: Generate detailed coverage report with lcov
      run: |
        cd build
        # Capture coverage data
        lcov --capture --directory . --output-file coverage.info
        
        # Remove system headers and external dependencies from coverage
        lcov --remove coverage.info \
          '/usr/*' \
          '*/build/_deps/*' \
          '*/tests/*' \
          '*/examples/*' \
          --output-file coverage_filtered.info
        
        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html
        
        # Generate summary for PR comment
        lcov --summary coverage_filtered.info > coverage_summary.txt
    
    - name: Generate coverage badge data
      run: |
        cd build
        # Extract coverage percentage
        COVERAGE=$(lcov --summary coverage_filtered.info | grep "lines" | grep -o '[0-9.]*%' | head -1)
        echo "COVERAGE_PERCENTAGE=${COVERAGE}" >> $GITHUB_ENV
        
        # Generate detailed coverage report for PR comment
        echo "## 📊 Test Coverage Report" > coverage_report.md
        echo "" >> coverage_report.md
        echo "**Coverage:** ${COVERAGE}" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "### Summary" >> coverage_report.md
        echo '```' >> coverage_report.md
        cat coverage_summary.txt >> coverage_report.md
        echo '```' >> coverage_report.md
        echo "" >> coverage_report.md
        
        # Get test results
        echo "### Test Results" >> coverage_report.md
        echo '```' >> coverage_report.md
        ctest --verbose 2>&1 | tail -20 >> coverage_report.md || true
        echo '```' >> coverage_report.md
        echo "" >> coverage_report.md
        
        # Add links to artifacts
        echo "### 📁 Artifacts" >> coverage_report.md
        echo "- 📈 [Detailed HTML Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> coverage_report.md
        echo "- 🧪 [Test Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> coverage_report.md
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./build/coverage_filtered.info
        flags: unittests
        name: EmbedIDS Coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: build/coverage_html/
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          build/Testing/
          build/coverage_summary.txt
          build/coverage.info
          build/coverage_filtered.info
        retention-days: 30
    
    - name: Comment PR with coverage report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './build/coverage_report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📊 Test Coverage Report')
            );
            
            const commentBody = `${report}
            
            <sub>🤖 This comment is automatically updated with the latest coverage results.</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          }
    
    - name: Check coverage threshold
      run: |
        cd build
        COVERAGE_NUM=$(echo $COVERAGE_PERCENTAGE | sed 's/%//')
        THRESHOLD=70
        
        echo "Current coverage: $COVERAGE_NUM%"
        echo "Required threshold: $THRESHOLD%"
        
        if (( $(echo "$COVERAGE_NUM < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE_NUM% is below threshold $THRESHOLD%"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "✅ Coverage $COVERAGE_NUM% meets threshold $THRESHOLD%"
        fi
    
    - name: Generate coverage summary for status check
      if: always()
      run: |
        cd build
        if [ -f coverage_filtered.info ]; then
          COVERAGE=$(lcov --summary coverage_filtered.info | grep "lines" | grep -o '[0-9.]*%' | head -1)
          echo "Coverage: $COVERAGE" > coverage_status.txt
          echo "STATUS=✅ Tests passed, Coverage: $COVERAGE" >> $GITHUB_ENV
        else
          echo "STATUS=❌ Coverage report generation failed" >> $GITHUB_ENV
        fi

  # Additional job for cross-platform testing (optional)
  test-matrix:
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-22.04
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu-22.04
            compiler: clang
            cc: clang-14
            cxx: clang++-14
          - os: ubuntu-24.04
            compiler: gcc
            cc: gcc-13
            cxx: g++-13
          - os: ubuntu-24.04
            compiler: clang
            cc: clang-18
            cxx: clang++-18
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
    
    - name: Configure and build
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DBUILD_TESTS=ON \
              -DBUILD_EXAMPLES=ON \
              ..
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
